name: Versioning

on:
  workflow_call:

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch target branch
        run: |
          git fetch origin develop:develop
          if [[ "${{ github.event.pull_request.base.ref }}" == release/* ]]; then
            git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}
          fi

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Capture old version from target branch
        id: capture_old_version
        run: |
          git checkout ${{ github.event.pull_request.base.ref }}
          old_version=$(jq -r .version package.json)
          echo "old_version=$old_version" >> $GITHUB_ENV

      - name: Get base version without suffix
        id: get_base_version
        run: |
          base_version=$(echo ${{ env.old_version }} | sed 's/-.*//')
          echo "base_version=$base_version" >> $GITHUB_ENV

      - name: Detect Functional Changes
        id: check-functional
        run: |
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -qvE '^(docs/|test/|ci/|build/|\\.github/)'; then
            echo "has_changes=true" >> $GITHUB_ENV
          else
            echo "has_changes=false" >> $GITHUB_ENV
          fi

      - name: Determine branch target and set suffix
        id: set_suffix
        run: |
          target_branch="${{ github.event.pull_request.base.ref }}"
          case "$target_branch" in
            "develop")
              suffix="-alpha"
              ;;
            "main")
              suffix=""
              ;;
            release/*)
              suffix="-beta"
              ;;
            *)
              echo "Unexpected target branch: $target_branch"
              exit 1
              ;;
          esac
          echo "suffix=$suffix" >> $GITHUB_ENV

      - name: Verify PR label for version bump and set bump type
        id: check_label
        run: |
          pr_number=${{ github.event.pull_request.number }}
          repo_full_name=${{ github.repository }}
          labels=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$repo_full_name/issues/$pr_number/labels")

          label_names=$(echo "$labels" | jq -r '.[].name')
          version_label_count=0
          bump_type=""

          if echo "$label_names" | grep -q "version: major"; then
            bump_type="major"
            version_label_count=$((version_label_count + 1))
          fi
          if echo "$label_names" | grep -q "version: minor"; then
            bump_type="minor"
            version_label_count=$((version_label_count + 1))
          fi
          if echo "$label_names" | grep -q "version: patch"; then
            bump_type="patch"
            version_label_count=$((version_label_count + 1))
          fi
          if echo "$label_names" | grep -q "version: none"; then
            echo "Skipping version bump as 'version: none' label is present."
            exit 0
          fi

          if [ "$version_label_count" -gt 1 ]; then
            echo "Multiple version labels found. Ensure only one version label is applied."
            exit 1
          elif [ "$version_label_count" -eq 0 ]; then
            echo "No valid version label found. Please add one of the following labels: version: major, version: minor, version: patch, or version: none."
            exit 1
          fi

          echo "bump_type=$bump_type" >> $GITHUB_ENV

      - name: Get latest pre-release iteration
        id: get_iteration
        if: env.has_changes == 'true'
        run: |
          TAG_PREFIX="v${{ env.base_version }}${{ env.suffix }}"
          LAST_TAG=$(git tag --list "${TAG_PREFIX}.*" --sort=-v:refname | head -n 1)

          if [[ -z "$LAST_TAG" ]]; then
            ITERATION=1
          else
            ITERATION=$(echo "$LAST_TAG" | grep -oE '[0-9]+$' || echo 0)
            ITERATION=$((ITERATION + 1))
          fi

          echo "iteration=$ITERATION" >> $GITHUB_ENV

      - name: Perform version bump with suffix and iteration
        if: env.has_changes == 'true' && env.bump_type != ''
        run: |
          git checkout ${{ github.head_ref }}

          npm version ${{ env.bump_type }} --no-git-tag-version
          bumped_version=$(jq -r .version package.json)

          final_version="${bumped_version}${{ env.suffix }}.${{ env.iteration }}"

          jq --arg version "$final_version" '.version = $version' package.json > temp.json && mv temp.json package.json
          npm install

          git add package.json package-lock.json
          git commit -m "chore: bump version from ${{ env.old_version }} to $final_version"
          git push origin HEAD:${{ github.head_ref }}
